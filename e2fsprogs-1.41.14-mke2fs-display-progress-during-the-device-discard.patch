From b2afd1e0df0d7f72ea8770b21edad805356b1100 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 18 Nov 2010 03:38:40 +0000
Subject: [PATCH 5/6] mke2fs: Display progress report during the device
 discard

Upstream commit: 7361c08e5da18c8774ffda94931c500490d51846
mke2fs: Use unix_discard() for discards

There is generic discard function in struct_io_manager, or in
unix_io_manager to be specific. So use this instead of
mke2fs_discard_blocks().

Since mke2fs_discard_blocks() is not used anymore (and should not be)
remove it.

Signed-off-by: Lukas Czerner <lczerner@redhat.com>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>

Upstream commit: 855a77a19704ef7e0acd542cce19a6e8ee07582d
mke2fs: Simple man page nodiscard option correction

It is not true that 'nodiscard' is set as default, so remove this
sentence. The default is 'discard' and it is properly documented in man
page.

Signed-off-by: Lukas Czerner <lczerner@redhat.com>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>

Upstream commit: 7d9e31655fca48e9d6c2647ad443124113508b73
mke2fs: Display progress report during the device discard

Update: Use the old progress_struct to show progress, so we do not need
to backport another quite large patch.

For some time now we are doing initial discard of the device prior to
filesystem creation. However, there is no feedback for the user and
hence on some devices with slow TRIM implementation it may appear that
mke2fs is stuck.

This commit introduce new function mke2fs_discard_device(), which is a
wrapper for io_channel_discard(). The discard is done in chunks of
2GB, which seems reasonably well for both slow and fast devices, and
discard progress is reported back to the user.

I gave up on doing fancy things like align discard according to
discard_alignment, checking for discard granularity and computing
estimate time. First of all, because it would require either new ioctl
to retrieve those information or use of libudev library, none of it
seems to be worth it. Regarding discard_granularity, I doubt there is
any sane device with discard granularity that big it would affect this.

Signed-off-by: Lukas Czerner <lczerner@redhat.com>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>

Upstream commit: aa07cb79b0a38d9d8407c5631624ef8534bdde3f
mke2fs: If the device supports discard, don't print an error message

Check to see if the device supports discard before starting the
progress bar, and then printing an error about inappropriate ioctl for
device (when creating a file system image to a file, for example).

Also, add a function signature in the ext2_io.h header file for
io_channel_discard() and fix an extra, uneeded argument in mke2fs's
call to that function.

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---
 lib/ext2fs/ext2_io.h |    3 ++
 misc/mke2fs.8.in     |    2 +-
 misc/mke2fs.c        |   81 ++++++++++++++++++++++++++-----------------------
 3 files changed, 47 insertions(+), 39 deletions(-)

diff --git a/lib/ext2fs/ext2_io.h b/lib/ext2fs/ext2_io.h
index 2d29200..42bfef2 100644
--- a/lib/ext2fs/ext2_io.h
+++ b/lib/ext2fs/ext2_io.h
@@ -116,6 +116,9 @@ extern errcode_t io_channel_read_blk64(io_channel channel,
 extern errcode_t io_channel_write_blk64(io_channel channel,
 					unsigned long long block,
 					int count, const void *data);
+extern errcode_t io_channel_discard(io_channel channel,
+				    unsigned long long block,
+				    unsigned long long count);
 
 /* unix_io.c */
 extern io_manager unix_io_manager;
diff --git a/misc/mke2fs.8.in b/misc/mke2fs.8.in
index 4bedd2e..948144d 100644
--- a/misc/mke2fs.8.in
+++ b/misc/mke2fs.8.in
@@ -247,7 +247,7 @@ zeroed. This significantly speeds up filesystem initialization. This is set
 as default.
 .TP
 .BI nodiscard
-Do not attempt to discard blocks at mkfs time. This is the default.
+Do not attempt to discard blocks at mkfs time.
 .RE
 .TP
 .BI \-f " fragment-size"
diff --git a/misc/mke2fs.c b/misc/mke2fs.c
index 5a8df65..0a027e5 100644
--- a/misc/mke2fs.c
+++ b/misc/mke2fs.c
@@ -69,6 +69,8 @@ extern int optind;
 #define ZAP_BOOTBLOCK
 #endif
 
+#define DISCARD_STEP_MB		(2048)
+
 extern int isatty(int);
 extern FILE *fpopen(const char *cmd, const char *mode);
 
@@ -1957,47 +1959,50 @@ static int mke2fs_setup_tdb(const char *name, io_manager *io_ptr)
 	return retval;
 }
 
-#ifdef __linux__
+static int mke2fs_discard_device(ext2_filsys fs)
+{
+	struct progress_struct progress;
+	blk64_t blocks = ext2fs_blocks_count(fs->super);
+	blk64_t count = DISCARD_STEP_MB;
+	blk64_t cur = 0;
+	int retval = 0;
 
-#ifndef BLKDISCARD
-#define BLKDISCARD	_IO(0x12,119)
-#endif
+	retval = io_channel_discard(fs->io, 0, 0);
+	if (retval)
+		return retval;
 
-/*
- * Return zero if the discard succeeds, and -1 if the discard fails.
- */
-static int mke2fs_discard_blocks(ext2_filsys fs)
-{
-	int fd;
-	int ret;
-	int blocksize;
-	__u64 blocks;
-	__uint64_t range[2];
-
-	blocks = fs->super->s_blocks_count;
-	blocksize = EXT2_BLOCK_SIZE(fs->super);
-	range[0] = 0;
-	range[1] = blocks * blocksize;
-
-	fd = open64(fs->device_name, O_RDWR);
-
-	if (fd > 0) {
-		ret = ioctl(fd, BLKDISCARD, &range);
-		if (verbose) {
-			printf(_("Calling BLKDISCARD from %llu to %llu "),
-			       (unsigned long long) range[0],
-			       (unsigned long long) range[1]);
-			if (ret)
-				printf(_("failed.\n"));
-			else
-				printf(_("succeeded.\n"));
-		}
-		close(fd);
+	count *= (1024 * 1024);
+	count /= fs->blocksize;
+
+	if (quiet)
+		memset(&progress, 0, sizeof(progress));
+	else
+		progress_init(&progress, _("Discarding device blocks: "),
+			      blocks);
+
+	while (cur < blocks) {
+		progress_update(&progress, cur);
+
+		if (cur + count > blocks)
+			count = blocks - cur;
+
+		retval = io_channel_discard(fs->io, cur, count);
+		if (retval)
+			break;
+		cur += count;
 	}
-	return ret;
-}
 
-#endif
+	if (retval) {
+		fputs(_("failed"), stdout);
+		if (!quiet)
+			printf(" - %s\n",error_message(retval));
+		else
+			printf("\n");
+	} else
+		fputs(_("done                            \n"), stdout);
+
+	return retval;
+}
 
 int main (int argc, char *argv[])
 {
@@ -2046,7 +2051,7 @@ int main (int argc, char *argv[])
 
 	/* Can't undo discard ... */
 	if (discard && (io_ptr != undo_io_manager)) {
-		retval = mke2fs_discard_blocks(fs);
+		retval = mke2fs_discard_device(fs);
 
 		if (!retval && io_channel_discard_zeroes_data(fs->io)) {
 			if (verbose)
-- 
1.7.4.4

