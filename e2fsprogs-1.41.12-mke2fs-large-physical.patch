commit f89f54aff479af859ee483c907041bcc9c0698f8
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Nov 21 09:56:53 2010 -0500

    mke2fs: Do not require -F for block size < physical size

    There will be SSD's out soon that have 8k or 16k phyiscal block sizes.
    So don't enforce a requirement that the block size be less than the
    physical block size unless the force option is given, and don't give a
    warning if the user can't do anything about it (i.e., if the physical
    block size is > than the page size).

    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

commit 92eb5a339220e66e965e536bf53d63249577a93a
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Nov 22 11:09:00 2010 -0500

    mke2fs: Set logical/physical sector size from environment for debugging
    
    If MKE2FS_DEVICE_SECTSIZE is set, then this will override the logical
    sector size, which is the smallest sector size that can be written
    atomically by the device.  (Previously MKE2FS_DEVICE_SECTSIZE set the
    physical sector size, which was incorrect given its historical usage.)
    The environment variable MKE2FS_DEVICE_PHYS_SECTSIZE will set the
    physical sector size, which is the actual sector size used by the
    device in reality.
    
    The logical sector size is always less than or equal to the physical
    sector size; and writes smaller than the physical sector size but
    greather than or equal to the logical sector size will cause a
    read-modify-write cycle within the device firmware (or in some
    abstract layer lower than the Linux block I/O subsystem, at any rate).
    
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

commit 2b21a0d9b6c7e0efeb553e2b0f61aba1b27f9257
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Nov 22 11:14:35 2010 -0500

    mke2fs: Force the default blocksize to be at least the logical sector size

    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Index: e2fsprogs-1.41.12/misc/mke2fs.c
===================================================================
--- e2fsprogs-1.41.12.orig/misc/mke2fs.c
+++ e2fsprogs-1.41.12/misc/mke2fs.c
@@ -1664,13 +1664,16 @@ got_size:
 			_("while trying to determine physical sector size"));
 		exit(1);
 	}
-	/* Older kernels may not have physical/logical distinction */
-	if (!psector_size)
-		psector_size = lsector_size;
 
 	if ((tmp = getenv("MKE2FS_DEVICE_SECTSIZE")) != NULL)
+		lsector_size = atoi(tmp);
+	if ((tmp = getenv("MKE2FS_DEVICE_PHYS_SECTSIZE")) != NULL)
 		psector_size = atoi(tmp);
 
+	/* Older kernels may not have physical/logical distinction */
+	if (!psector_size)
+		psector_size = lsector_size;
+
 	if (blocksize <= 0) {
 		use_bsize = get_int_from_profile(fs_types, "blocksize", 4096);
 
@@ -1680,24 +1683,23 @@ got_size:
 			    (use_bsize > 4096))
 				use_bsize = 4096;
 		}
-		if (psector_size && use_bsize < psector_size)
-			use_bsize = psector_size;
+		if (lsector_size && use_bsize < lsector_size)
+			use_bsize = lsector_size;
 		if ((blocksize < 0) && (use_bsize < (-blocksize)))
 			use_bsize = -blocksize;
 		blocksize = use_bsize;
 		fs_param.s_blocks_count /= blocksize / 1024;
 	} else {
-		if (blocksize < lsector_size ||			/* Impossible */
-		    (!force && (blocksize < psector_size))) {	/* Suboptimal */
+		if (blocksize < lsector_size) {			/* Impossible */
 			com_err(program_name, EINVAL,
 				_("while setting blocksize; too small "
 				  "for device\n"));
 			exit(1);
-		} else if (blocksize < psector_size) {
+		} else if ((blocksize < psector_size) &&
+			   (psector_size <= sys_page_size)) {	/* Suboptimal */
 			fprintf(stderr, _("Warning: specified blocksize %d is "
-				"less than device physical sectorsize %d, "
-				"forced to continue\n"), blocksize,
-				psector_size);
+				"less than device physical sectorsize %d\n"),
+				blocksize, psector_size);
 		}
 	}
 
